@page "/proveedoreseditar"
@using Ardalis.Result
@using Zimat.Inventarios.UseCases.Documentos.Create
@using Zimat.Inventarios.UseCases.Proveedores
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ILogger<Proveedores> logger
@using MediatR
@inject IMediator _mediator
@using Zimat.Inventarios.UseCases.Proveedores.Delete
@using Zimat.Inventarios.UseCases.Proveedores.List
@using Zimat.Inventarios.Web.Components.Pages.Articulos
@attribute [Authorize]


<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<PageTitle>Proveedores</PageTitle>
<RadzenTemplateForm TItem="DocumentoDTO" Data="@documento" Visible="@(documento != null)" Submit="@FormSubmit">
<RadzenStack>
     
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Proveedores" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            
        </RadzenColumn>
    </RadzenRow>

     <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="2">
                <RadzenLabel Text="Proveedor" Component="proveedor" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="5">
                <RadzenDropDown @bind-Value="@documento!.ProveedorId" Data=@listadoProveedores TextProperty="@nameof(ProveedorDTO.Nombre)" ValueProperty="Id"
                                AllowClear=false Placeholder="Seleccione un proveedor" style="display: block; width: 100%" Name="DropDownFamilia" />
            </RadzenColumn>
            <RadzenColumn SizeMD="1">
                <RadzenLabel Text="Fecha" Component="fecha" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="4">
                <RadzenDatePicker @bind-Value="@documento!.Fecha" Name="fecha" ShowCalendarWeek />
                <RadzenRequiredValidator Component="fecha" Text="La fecha es requerida" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="2">
                <RadzenLabel Text="Folio" Component="folio" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="4">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@documento!.Folio" Name="folio" />
                <RadzenRequiredValidator Component="folio" Text="El folio es requerida" />
            </RadzenColumn>
            <RadzenColumn SizeMD="2">
                <RadzenLabel Text="Referencia" Component="refencia" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="4">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@documento!.Referencia" Name="referencia" />
                
            </RadzenColumn>
        </RadzenRow>

    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid  @ref="grid0" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                            Data="@proveedores" TItem="ProveedorGridModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="300px">
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Nuevo" Click="@InsertRow"  />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="ProveedorGridModel" Property="Clave" Title="Clave">
                        <EditTemplate Context="proveedor">
                            <RadzenTextBox @bind-Value="proveedor.Clave" Style="width:200px; display: block" Name="clave" aria-label="Introduzca Clave" />

                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorGridModel" Property="Nombre" Title="Nombre">
                        <EditTemplate Context="proveedor">
                            <RadzenTextBox @bind-Value="proveedor.Nombre" Style="width:200px; display: block" Name="nombre" aria-label="Enter ship name" />
                            
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorGridModel" Property="Rfc" Title="Rfc">
                        <EditTemplate Context="proveedor">
                            <RadzenTextBox @bind-Value="proveedor.Rfc" Style="width:200px; display: block" Name="rfc" aria-label="Introduzca RFC" />

                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="prov" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true"  FrozenPosition="FrozenColumnPosition.Right">
                       
                        <EditTemplate Context="prov">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(prov))" aria-label="Save">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(prov))" aria-label="Cancel">
                            </RadzenButton>
                           
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
     <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    
</RadzenStack>
</RadzenTemplateForm>
@code {

 protected class DocumentoDTO
    {
        public string Folio { get; set; } = "";
        public int TipoDocumentoId { get; set; } = 1;
        public DateTime Fecha { get; set; } = DateTime.Now;
        public int? ClienteId { get; set; }
        public int? ProveedorId { get; set; }
        public int? FormaPagoId { get; set; }
        public string Divisa { get; set; } = "MXN";
        public decimal TipoCambio { get; set; } = 1m;
        public decimal PDescuento { get; set; } = 0m;
        public decimal Descuento { get; set; } = 0m;
        public DateTime? FechaPago { get; set; }
        public string? Referencia { get; set; }
        public decimal Importe { get; set; } = 0;
    }
    protected class ProveedorGridModel
    {
        public int Id { get; set; }
        public string Clave { get; set; } = "";
        public string Nombre { get; set; } = "";
        public string Rfc { get; set; } = "";
        public string CodigoPostal { get; set; } = "";
    }

    protected bool errorVisible;

     IEnumerable<ProveedorDTO>? listadoProveedores { get; set; }
     protected DocumentoDTO documento { get; set; } = new();

    protected IEnumerable<ProveedorGridModel> proveedores = [];
    List<ProveedorGridModel> itemToInsert = new List<ProveedorGridModel>();
    List<ProveedorGridModel> itemToUpdate = new List<ProveedorGridModel>();

    protected RadzenDataGrid<ProveedorGridModel> grid0 = new();
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
         var resultProveedores = await _mediator.Send(new ListProveedoresQuery(null, null));
        if (resultProveedores.IsSuccess)
        {
            listadoProveedores = resultProveedores.Value;
        }
        // Result<IEnumerable<ProveedorDTO>> result = await _mediator.Send(new ListProveedoresQuery(null, null));

        // if (result.IsSuccess)
        // {
        //     proveedores = result.Value;
        // }
        

    }

    protected async Task FormSubmit()
    {

        try
        {
            documento.Importe = 100;
            //await zimatService.CreateProduct(product);
            var result = await _mediator.Send(new CreateDocumentoCommand(documento.Folio!, DateTime.UtcNow,documento.TipoDocumentoId, documento.ClienteId,
                documento.ProveedorId, documento.Importe));
            DialogService.Close(documento);
        }
        catch (Exception)
        {
            errorVisible = true;
        }

    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        await Task.Run(() => DialogService.Close(null));
    }
    void Reset()
    {
        itemToInsert.Clear();
        itemToUpdate.Clear();
    }




    async Task InsertRow()
    {

        Reset();
        var proveedor = new ProveedorGridModel();
        itemToInsert.Add(proveedor);
       
        await grid0.InsertRow(proveedor);
    }


    void OnCreateRow(ProveedorGridModel item)
    {
      

        itemToInsert.Remove(item);
    }

    void OnUpdateRow(ProveedorGridModel item)
    {
        Reset(item);

        
    }

    void Reset(ProveedorGridModel item)
    {
        itemToInsert.Remove(item);
        itemToUpdate.Remove(item);
    }

    async Task SaveRow(ProveedorGridModel item)
    {
        await grid0.UpdateRow(item);
    }


    void CancelEdit(ProveedorGridModel order)
    {
        Reset(order);

        grid0.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

}
