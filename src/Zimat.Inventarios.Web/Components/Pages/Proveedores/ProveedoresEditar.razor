@page "/proveedoreseditar"
@using Ardalis.Result
@using Zimat.Inventarios.UseCases.Proveedores
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ILogger<Proveedores> logger
@using MediatR
@inject IMediator _mediator
@using Zimat.Inventarios.UseCases.Proveedores.Delete
@using Zimat.Inventarios.UseCases.Proveedores.List
@using Zimat.Inventarios.Web.Components.Pages.Articulos
@attribute [Authorize]


<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<PageTitle>Proveedores</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Proveedores" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Nuevo" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid  @ref="grid0" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                            Data="@proveedores" TItem="ProveedorGridModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="300px">
                <HeaderTemplate>
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Nuevo" Click="@InsertRow"  />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="ProveedorGridModel" Property="Clave" Title="Clave">
                        <EditTemplate Context="proveedor">
                            <RadzenTextBox @bind-Value="proveedor.Clave" Style="width:200px; display: block" Name="clave" aria-label="Introduzca Clave" />

                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorGridModel" Property="Nombre" Title="Nombre">
                        <EditTemplate Context="proveedor">
                            <RadzenTextBox @bind-Value="proveedor.Nombre" Style="width:200px; display: block" Name="nombre" aria-label="Enter ship name" />
                            
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorGridModel" Property="Rfc" Title="Rfc">
                        <EditTemplate Context="proveedor">
                            <RadzenTextBox @bind-Value="proveedor.Rfc" Style="width:200px; display: block" Name="rfc" aria-label="Introduzca RFC" />

                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Context="prov" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true"  FrozenPosition="FrozenColumnPosition.Right">
                       
                        <EditTemplate Context="prov">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(prov))" aria-label="Save">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(prov))" aria-label="Cancel">
                            </RadzenButton>
                           
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
@code {

    protected class ProveedorGridModel
    {
        public int Id { get; set; }
        public string Clave { get; set; } = "";
        public string Nombre { get; set; } = "";
        public string Rfc { get; set; } = "";
        public string CodigoPostal { get; set; } = "";
    }

    protected IEnumerable<ProveedorGridModel>? proveedores;
    List<ProveedorGridModel> itemToInsert = new List<ProveedorGridModel>();
    List<ProveedorGridModel> itemToUpdate = new List<ProveedorGridModel>();

    protected RadzenDataGrid<ProveedorGridModel> grid0 = new();
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        // Result<IEnumerable<ProveedorDTO>> result = await _mediator.Send(new ListProveedoresQuery(null, null));

        // if (result.IsSuccess)
        // {
        //     proveedores = result.Value;
        // }
        proveedores = new List<ProveedorGridModel>()
        {
            new ProveedorGridModel
            {
                Id = 1,
                Clave = "100",
                Nombre = "Proveedor",
                CodigoPostal="30700"
            }
        };

    }


    void Reset()
    {
        itemToInsert.Clear();
        itemToUpdate.Clear();
    }




    async Task InsertRow()
    {

        Reset();
        var proveedor = new ProveedorGridModel();
        itemToInsert.Add(proveedor);
       
        await grid0.InsertRow(proveedor);
        //await grid0.Reload();
    }


    void OnCreateRow(ProveedorGridModel item)
    {
      

        itemToInsert.Remove(item);
    }

    void OnUpdateRow(ProveedorGridModel item)
    {
        Reset(item);

        
    }

    void Reset(ProveedorGridModel item)
    {
        itemToInsert.Remove(item);
        itemToUpdate.Remove(item);
    }

    async Task SaveRow(ProveedorGridModel item)
    {
        await grid0.UpdateRow(item);
    }


    void CancelEdit(ProveedorGridModel order)
    {
        Reset(order);

        grid0.CancelEditRow(order);

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

}
