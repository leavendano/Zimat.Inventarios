@page "/proveedores"
@using Ardalis.Result
@using Zimat.Inventarios.UseCases.Proveedores
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ILogger<Proveedores> logger
@using MediatR
@inject IMediator _mediator
@using Zimat.Inventarios.UseCases.Proveedores.Delete
@using Zimat.Inventarios.UseCases.Proveedores.List
@using Zimat.Inventarios.Web.Components.Pages.Articulos
@attribute [Authorize]


<PageTitle>Proveedores</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Proveedores" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Nuevo" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                    ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30}) Data="@proveedores" TItem="ProveedorDTO" RowSelect="@EditRow">
                <Columns>
                    <RadzenDataGridColumn TItem="ProveedorDTO" Property="Clave" Title="Clave">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorDTO" Property="Nombre" Title="Nombre">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorDTO" Property="Rfc" Title="Rfc">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ProveedorDTO" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="proveedor">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, proveedor)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
@code {

    protected IEnumerable<ProveedorDTO>? proveedores;

    protected RadzenDataGrid<ProveedorDTO> grid0 = new();
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        Result<IEnumerable<ProveedorDTO>> result = await _mediator.Send(new ListProveedoresQuery(null, null));

        if (result.IsSuccess)
        {
            proveedores = result.Value;
        }

    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        //await DialogService.OpenAsync<AddArticulo>("Nuevo Artículo", null, new DialogOptions() { Width = $"{900}px", Height = $"{600}px" });
        Result<IEnumerable<ProveedorDTO>> result = await _mediator.Send(new ListProveedoresQuery(null, null));

        if (result.IsSuccess)
        {

            proveedores = result.Value;
            await grid0.Reload();
        }

    }

    protected async Task EditRow(ProveedorDTO args)
    {
        await DialogService.OpenAsync<EditArticulo>("Edit Articulo", new Dictionary<string, object> { { "Id", args.Id } });
        Result<IEnumerable<ProveedorDTO>> result = await _mediator.Send(new ListProveedoresQuery(null, null));
        if (result.IsSuccess)
        {

            proveedores = result.Value;
            await grid0.Reload();
        }
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ProveedorDTO articulo)
    {
        try
        {
            if (await DialogService.Confirm("Está seguro de borrar este elemento?") == true)
            {

                var result = await _mediator.Send(new DeleteProveedorCommand(articulo.Id));

                if (result.IsSuccess)
                {
                    Result<IEnumerable<ProveedorDTO>> result2 = await _mediator.Send(new ListProveedoresQuery(null, null));
                    if (result2.IsSuccess)
                    {
                        proveedores = result2.Value;
                        await grid0.Reload();
                    }

                }
            }
        }
        catch (Exception e)
        {
            logger.LogError(0, e, "Error al eliminar un elemento");
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Product"
                });
        }
    }
}
