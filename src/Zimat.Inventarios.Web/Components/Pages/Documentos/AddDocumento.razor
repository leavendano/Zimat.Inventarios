@page "/add-documento"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject ILogger<AddDocumento> logger
@using Zimat.Inventarios.UseCases.Articulos
@using Zimat.Inventarios.UseCases.Articulos.List
@using Zimat.Inventarios.UseCases.Documentos
@using Zimat.Inventarios.UseCases.Documentos.Create
@using Zimat.Inventarios.UseCases.Proveedores
@using Zimat.Inventarios.UseCases.Proveedores.List
@using MediatR
@inject IMediator _mediator
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize]

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<PageTitle>Nuevo Documento</PageTitle>

<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">No se pudo guardar el documento</RadzenAlert>
    
    <RadzenTemplateForm TItem="DocumentoViewModel" Data="@documento" Visible="@(documento != null)" Submit="@FormSubmit">
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="2">
                <RadzenLabel Text="Proveedor" Component="proveedor" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="5">
                <RadzenDropDown @bind-Value="@documento!.ProveedorId" Data=@listadoProveedores TextProperty="@nameof(ProveedorDTO.Nombre)" ValueProperty="Id"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                AllowClear=false Placeholder="Seleccione un proveedor" style="display: block; width: 100%" Name="DropDownFamilia" />
            </RadzenColumn>
            <RadzenColumn SizeMD="1">
                <RadzenLabel Text="Fecha" Component="fecha" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="4">
                <RadzenDatePicker @bind-Value="@documento!.Fecha" Name="fecha" ShowCalendarWeek />
                <RadzenRequiredValidator Component="fecha" Text="La fecha es requerida" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="2">
                <RadzenLabel Text="Tipo" Component="DropDownTipo" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="4">
                <RadzenDropDown @bind-Value="@documento!.TipoDocumentoId" Data=@tiposDocumento TextProperty="@nameof(TipoDocumento.Descripcion)" ValueProperty="Id"
                                    AllowClear=false Placeholder="Seleccione un Tipo" style="display: block; width: 100%" Name="DropDownTipo"  />
                <RadzenRequiredValidator Component="DropDownTipo" Text="El tipo es requerido" />
            </RadzenColumn>
            <RadzenColumn SizeMD="2">
                <RadzenLabel Text="Referencia" Component="refencia" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="4">
                <RadzenDropDown @bind-Value="@documento!.DocumentoRelacionadoId" Data=@documentosProveedor TextProperty="@nameof(DocumentoDTO.Folio)" ValueProperty="@nameof(DocumentoDTO.Id)"
                                    AllowClear=false Placeholder="Seleccione un Documento" style="display: block; width: 100%" Name="DropDownTipo"  />
                
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn SizeMD=12>
                <RadzenDataGrid @ref="grid0" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                ShowPagingSummary="true" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="160px"  Data="@conceptos" TItem="DocumentoConceptoDTO">
                    <HeaderTemplate>
                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Agregar fila" Click="@InsertRow" />
                        
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="Clave" Title="Clave" Width="100px">
                            <EditTemplate Context="concepto">

                                <RadzenDropDown @bind-Value="concepto.ArticuloId" Data="@articulos" TextProperty="@nameof(ArticuloDTO.Clave)" ValueProperty="Id"
                                                AllowClear=false Placeholder="" style="display: block; width: 150px" Name="DropDownArticulo" TValue="Guid"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                    Change="@(args => { var item = articulos!.Where(x => x.Id == (Guid)args).First();concepto!.Descripcion=item.Descripcion;concepto.Unidad = item.Unidad;concepto.UltimoCosto = item.UltimoCosto?? 0m;concepto.Impuesto1=item.Impuesto1;concepto.Clave=item.Clave;})" />
                                
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="Descripcion" Title="Descripcion">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="Cantidad" Title="Cantidad">
                            <EditTemplate Context="concepto">
                                <RadzenNumeric @bind-Value="concepto.Cantidad" Style="width:100px; display: block" Name="cantidad" aria-label="cantidad"
                                               TextAlign="TextAlign.Right" ShowUpDown="false" Format="0.00"
                                               Change="@(args => concepto.Importe = args * concepto.UltimoCosto)" TValue="decimal" />
                                <RadzenRequiredValidator Text="cantidad es requerido" Component="cantidad" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="Unidad" Title="Unidad">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="UltimoCosto" Title="Costo">
                            <EditTemplate Context="concepto">
                                <RadzenNumeric @bind-Value="concepto.UltimoCosto" Style="width:100px; display: block" Name="costo" aria-label="costo"
                                               TextAlign="TextAlign.Right" ShowUpDown="false" Format="0.00"
                                               Change="@(args => concepto.Importe = concepto.Cantidad * args)" TValue="decimal" />
                                <RadzenRequiredValidator Text="precio es requerido" Component="costo" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="Descuento" Title="%Descuento">
                            <EditTemplate Context="concepto">
                                <RadzenNumeric @bind-Value="concepto.Descuento" Style="width:100px; display: block" Name="descuento" aria-label="descuento"
                                               TextAlign="TextAlign.Right" ShowUpDown="false" Format="0.00"
                                               Change="@(args => concepto.DescuentoImporte = concepto.Cantidad * concepto.UltimoCosto * (100 - args)/100)" TValue="decimal" />
                               
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="DocumentoConceptoDTO" Property="Importe" Title="Importe">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Context="concepto" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true"  FrozenPosition="FrozenColumnPosition.Right">
                            <Template Context="concepto">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(concepto))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(concepto))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="concepto">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(concepto))" aria-label="Save">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(concepto))" aria-label="Cancel">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        
                    </Columns>

                </RadzenDataGrid>

            </RadzenColumn>
        </RadzenRow>
       <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Normal" >
            <RadzenRow AlignItems="AlignItems.Normal"> 
                <RadzenColumn >
                    <RadzenText Text="SubTotal" style="margin: 0" />
                </RadzenColumn>
                <RadzenColumn >
                    <RadzenNumeric @bind-Value="@documento!.Subtotal" Style="width:200px; display: block" Name="subtotal" aria-label="subtotal"
                                   TextAlign="TextAlign.Right" Disabled="true" ShowUpDown="false" Format="0.00" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Normal">
                <RadzenColumn>
                    <RadzenText Text="Desc Global" style="margin: 0" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric @bind-Value="@documento!.DescuentoDocumento" Style="width:200px; display: block" Name="descuento_documento" aria-label="descuento"
                                   TextAlign="TextAlign.Right" Disabled="true" ShowUpDown="false" Format="0.00" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Normal">
                <RadzenColumn>
                    <RadzenText Text="Desc Par" style="margin: 0" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric @bind-Value="@documento!.DescuentoDocumento" Style="width:200px; display: block" Name="descuento_documento" aria-label="descuento"
                                   TextAlign="TextAlign.Right" Disabled="true" ShowUpDown="false" Format="0.00" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Normal">
                <RadzenColumn>
                    <RadzenText Text="Impuesto" style="margin: 0" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric @bind-Value="@documento!.Impuestos" Style="width:200px; display: block" Name="sumaimpuesto" aria-label="impuesto"
                                   TextAlign="TextAlign.Right" Disabled="true" ShowUpDown="false" Format="0.00" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Normal">
                <RadzenColumn >
                    <RadzenText Text="Total" style="margin: 0" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric @bind-Value="@documento!.Total" Style="width:200px; display: block" Name="total" aria-label="total"
                                   TextAlign="TextAlign.Right" Disabled="true" ShowUpDown="false" Format="0.00" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Guardar" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancelar" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {

    protected class DocumentoViewModel
    {
        public string Folio { get; set; } = "";
        public int TipoDocumentoId { get; set; } = 1;
        public DateTime Fecha { get; set; } = DateTime.Now;
        public int? ClienteId { get; set; }
        public int? ProveedorId { get; set; }
        public int? FormaPagoId { get; set; }
        public string Divisa { get; set; } = "MXN";
        public decimal TipoCambio { get; set; } = 1m;
        public decimal PDescuento { get; set; } = 0m;
        public decimal Descuento { get; set; } = 0m;
        public DateTime? FechaPago { get; set; }
        public string? Referencia { get; set; }
        public decimal Subtotal { get; set; } = 0;
        public decimal DescuentoDocumento { get; set; } = 0;
        public decimal DescuentoConceptos { get; set; } = 0;
        public decimal Impuestos { get; set; } = 0;
        public decimal Total { get; set; } = 0;
        public Guid? DocumentoRelacionadoId {get; set;}
    }

   @*  protected class ConceptoGridModel
    {
        public Guid ArticuloId { get; set; }
        public string Clave { get; set; } = "";
        public string Descripcion { get; set; } = "";
        public decimal Precio { get; set; } = 0m;
        public decimal Cantidad {get; set;} = 0m;
        public string Unidad { get; set; } = "";
        public decimal Impuesto1 { get; set; } = 16m;
        public decimal Impuesto2 { get; set; } = 0;
        public decimal UltimoCosto { get; set; }
        public decimal Descuento { get; set; } = 0m;
        public decimal DescuentoImporte { get; set; } = 0m;
        public decimal Importe { get; set; }

    } *@
    
    protected record TipoDocumento(int Id, string Descripcion);

    protected bool errorVisible;
    [SupplyParameterFromForm]
    protected DocumentoViewModel documento { get; set; } = new();

    protected IEnumerable<DocumentoDTO> documentosProveedor {get;set;} = [];

    protected IEnumerable<DocumentoConceptoDTO> conceptos { get; set; } = [];
    protected IEnumerable<ArticuloDTO>? articulos = [];

    protected IEnumerable<TipoDocumento> tiposDocumento {get;set;} = [];

    List<DocumentoConceptoDTO> conceptosToInsert = [];
    List<DocumentoConceptoDTO> conceptosToUpdate = [];

    List<DocumentoConceptoDTO> conceptosToSave = [];

    RadzenDataGrid<DocumentoConceptoDTO> grid0 = new();

    string? UserName = null;
    IEnumerable<ProveedorDTO>? listadoProveedores { get; set; }

    protected decimal ImporteInicial = 0;
    protected decimal Impuesto = 0;
    protected decimal Total = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        UserName = user?.Identity?.Name;

        var resultProveedores = await _mediator.Send(new ListProveedoresQuery(null, null));
        if (resultProveedores.IsSuccess)
        {
            listadoProveedores = resultProveedores.Value;
        }

        var result = await _mediator.Send(new ListArticulosQuery(null, null));
        if (result.IsSuccess)
        {
            articulos = result.Value;
        }

        tiposDocumento = new List<TipoDocumento> 
            {
                new TipoDocumento(1,"Orden de Compra"),
                new TipoDocumento(2,"Compra"),
                new TipoDocumento(3,"Contrato")
            };

    }



    protected async Task FormSubmit()
    {

        try
        {
            //await zimatService.CreateProduct(product);
            var result = await _mediator.Send(new CreateDocumentoCommand(documento.Folio!, DateTime.UtcNow,documento.TipoDocumentoId, documento.ClienteId,
                documento.ProveedorId, documento.Total,documento.DocumentoRelacionadoId,conceptosToSave));
            DialogService.Close(documento);
        }
        catch (Exception e)
        {
            errorVisible = true;
            logger.LogError(e,"{Message}",e.Message);
        }

    }

    void OnChange(decimal value)
    {

        decimal valor = (decimal)value;
        logger.LogInformation($"value changed to {valor}");


    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        await Task.Run(() => DialogService.Close(null));
    }

    async Task InsertRow()
    {

        Reset();
        var concepto = new DocumentoConceptoDTO();
        conceptosToInsert.Add(concepto);

        await grid0.InsertRow(concepto);

    }

    void Reset()
    {
        conceptosToInsert.Clear();
        conceptosToUpdate.Clear();
    }

    void OnCreateRow(DocumentoConceptoDTO item)
    {
        conceptosToInsert.Remove(item);
    }

    void OnUpdateRow(DocumentoConceptoDTO item)
    {
        Reset(item);


    }

    void Reset(DocumentoConceptoDTO item)
    {
        conceptosToInsert.Remove(item);
        conceptosToUpdate.Remove(item);
    }

    async Task SaveRow(DocumentoConceptoDTO item)
    {
        item.DescuentoImporte = (item.Importe  * item.Descuento / 100);
        documento.Subtotal += (item.Importe - ImporteInicial);
        documento.DescuentoConceptos += ((item.Importe - ImporteInicial) - item.DescuentoImporte);
        documento.Impuestos += ((item.Importe-item.DescuentoImporte - ImporteInicial) * item.Impuesto1/100);
        documento.Total = documento.Subtotal + documento.Impuestos - documento.DescuentoDocumento; 
        await grid0.UpdateRow(item);
        var precio = articulos?.First(x => x.Id == item.ArticuloId).PrecioPublico;
        item.Precio= precio ?? 1m;
        conceptosToSave.Add(item);
        ImporteInicial = 0;
    }

    async Task EditRow(DocumentoConceptoDTO item)
    {
        if (conceptosToInsert.Count() > 0)
        {
            Reset();
        }
        ImporteInicial = item.Importe;
        conceptosToUpdate.Add(item);
        await grid0.EditRow(item);
    }

    async Task DeleteRow(DocumentoConceptoDTO item)
    {
        Reset(item);

        if (conceptos.Contains(item))
        {


            await grid0.Reload();
        }
        else
        {
            documento.Subtotal -= item.Importe;
            documento.Total = documento.Subtotal + documento.Impuestos - documento.DescuentoDocumento;
            grid0.CancelEditRow(item);
            await grid0.Reload();
        }
    }

    void CancelEdit(DocumentoConceptoDTO order)
    {
        Reset(order);

        grid0.CancelEditRow(order);
        ImporteInicial = 0;

        // var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }
    
}
